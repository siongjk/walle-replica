/**
 * oLED Display
 *
 * @file      display.ino
 * @brief     Draw battery level on the oLED display
 * @author    Hans Vandamme
 * @copyright MIT license
 * @version   1.0
 *
 * Code to draw the battery level indicator onto an oLED
 * display. For instructions of how to wire up the display,
 * see the README file included in this repository.
 */

#ifdef OLED

/**
 * Draw battery level on the display
 * 
 * @param  batlevel The current battery percentage
 */
void displayLevel(int batlevel) {

	u8g2.firstPage();
	do {
		u8g2.setDrawColor(1);
		drawSun();

		// Scale to 50% as the battery should not drop bellow that anyway
		drawBatt10();
		if (batlevel > 55) drawBatt20();
		if (batlevel > 60) drawBatt30();
		if (batlevel > 65) drawBatt40();
		if (batlevel > 70) drawBatt50();
		if (batlevel > 75) drawBatt60();
		if (batlevel > 80) drawBatt70();
		if (batlevel > 85) drawBatt80();
		if (batlevel > 90) drawBatt90();
		if (batlevel > 95) drawBatt100();
	} while ( u8g2.nextPage() );
 
}

//initiate display animation of solar charge display at setup. Replace line 204::  displayLevel(100); in wall-e.ino
void intDisplayLevel (void){
	displayLevel(10);
//Playsound
	delay(1000);
	displayLevel(20);
//Playsound
	delay(700);
	displayLevel(30);
//Playsound
	delay(700);
	displayLevel(40);
//Playsound
	delay(700);
	displayLevel(50);
//Playsound
	delay(500);
	displayLevel(60);
//Playsound
	delay(500);
	displayLevel(70);
//Playsound
	delay(500);
	displayLevel(80);
//Playsound
	delay(500);
	displayLevel(90);
//Playsound
	delay(500);
	displayLevel(100);
//Playsound
	delay(1000);
}

/**
 * Functions to draw each of the battery level bars
 */
void drawBatt10() {
	u8g2.drawBox(114, 0, 12, 38);
}

void drawBatt20() {
	u8g2.drawBox(103, 0, 7, 30);
}

void drawBatt30() {
	u8g2.drawBox(92, 0, 7, 30);
}

void drawBatt40() {
	u8g2.drawBox(81, 0, 7, 30);
}

void drawBatt50() {
	u8g2.drawBox(70, 0, 7, 30);
}

void drawBatt60() {
	u8g2.drawBox(59, 0, 7, 30);
}

void drawBatt70() {
	u8g2.drawBox(48, 0, 7, 30);
}

void drawBatt80() {
	u8g2.drawBox(37, 0, 7, 30);
}

void drawBatt90() {
	u8g2.drawBox(26, 0, 7, 30);
}

void drawBatt100() {
	u8g2.drawBox(15, 0, 7, 30);
}


/**
 * Draw the sun icon on the display
 */
void drawSun() {
	//Draw version
/**	u8g2.drawCircle(25, 52, 5, U8G2_DRAW_ALL);
	u8g2.drawCircle(25, 52, 4, U8G2_DRAW_ALL);
	u8g2.drawLine(25, 45, 25, 41);
	u8g2.drawLine(25, 59, 25, 63);
	u8g2.drawLine(18, 52, 14, 52);
	u8g2.drawLine(32, 52, 36, 52);
	u8g2.drawLine(28, 46, 31, 42);
	u8g2.drawLine(31, 49, 35, 46);
	u8g2.drawLine(29, 58, 31, 62);
	u8g2.drawLine(31, 55, 35, 58);
	u8g2.drawLine(21, 58, 19, 62);
	u8g2.drawLine(19, 55, 15, 58);
	u8g2.drawLine(22, 46, 19, 42);
	u8g2.drawLine(19, 49, 15, 46);
 */

	//XBM version
#define sun_width 30
#define sun_height 30
//120
static unsigned char sun_bits[] = {
  0x00, 0xC0, 0x00, 0x00, 0x80, 0xC1, 0x60, 0x00, 0x80, 0xC1, 0x60, 0x00, 
  0x00, 0xC3, 0x30, 0x00, 0x00, 0xC3, 0x30, 0x00, 0x00, 0xC6, 0x18, 0x00, 
  0x00, 0x06, 0x18, 0x00, 0x06, 0x00, 0x00, 0x18, 0x1E, 0xE0, 0x01, 0x1E, 
  0x78, 0xF8, 0x87, 0x07, 0x60, 0x3C, 0x8F, 0x01, 0x00, 0x0E, 0x1C, 0x00, 
  0x00, 0x06, 0x18, 0x00, 0x00, 0x07, 0x38, 0x00, 0x3F, 0x03, 0x30, 0x3F, 
  0x3F, 0x03, 0x30, 0x3F, 0x00, 0x07, 0x38, 0x00, 0x00, 0x06, 0x18, 0x00, 
  0x00, 0x0E, 0x1C, 0x00, 0x60, 0x3C, 0x0F, 0x00, 0x78, 0xF8, 0x87, 0x01, 
  0x1E, 0xE0, 0x81, 0x07, 0x06, 0x00, 0x00, 0x1E, 0x00, 0x06, 0x18, 0x18, 
  0x00, 0xC6, 0x18, 0x00, 0x00, 0xC3, 0x30, 0x00, 0x00, 0xC3, 0x30, 0x00, 
  0x80, 0xC1, 0x60, 0x00, 0x80, 0xC1, 0x60, 0x00, 0x00, 0xC0, 0x00, 0x00, 
};
#define solar_width 13
#define solar_height 63
//126
static unsigned char solar_bits[] = {
  0x46, 0x0C, 0x42, 0x08, 0x42, 0x08, 0xFE, 0x0F, 0x00, 0x00, 0xC0, 0x03, 
  0x46, 0x0C, 0x02, 0x08, 0x06, 0x0C, 0xF8, 0x03, 0x00, 0x00, 0xBC, 0x0F, 
  0x42, 0x00, 0x42, 0x00, 0x42, 0x00, 0xFE, 0x0F, 0x00, 0x00, 0xF0, 0x0F, 
  0x8C, 0x00, 0x86, 0x00, 0x8C, 0x00, 0xF0, 0x0F, 0x00, 0x00, 0xFE, 0x0F, 
  0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0xFE, 0x0F, 0x00, 0x00, 0x06, 0x0C, 
  0x02, 0x08, 0x06, 0x0C, 0xF8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xBC, 0x0F, 0x42, 0x00, 0x42, 0x00, 0x42, 0x00, 0xFE, 0x0F, 0x00, 0x00, 
  0xF0, 0x0F, 0x8C, 0x00, 0x86, 0x00, 0x8C, 0x00, 0xF0, 0x0F, 0x00, 0x00, 
  0x00, 0x0C, 0x00, 0x08, 0xFE, 0x0F, 0x00, 0x00, 0xF8, 0x03, 0x06, 0x0C, 
  0x02, 0x08, 0x06, 0x0C, 0xF8, 0x03, 0x00, 0x00, 0x80, 0x03, 0x46, 0x0C, 
  0x42, 0x08, 0x46, 0x0C, 0x38, 0x00,  
};
    u8g2.drawXBM( 25, 33, sun_width, sun_height, sun_bits); //The sun image
    u8g2.drawXBM( 1, 0, solar_width, solar_height, solar_bits); //wording in BMP
}

	
}

#endif /* OLED */
